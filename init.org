#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* ~init.el~ Header Information
  The following is some boiler plate information to indicate that this init
  file has been automatically generated from this org file.  Any changes
  made directly to the ~init.el~ file will be overwritten at the time the
  code from this file is tangled by babel.

#+BEGIN_SRC emacs-lisp
  ;;; init.el -- emacs init file
  ;;; Commentary:
  ;;;     This file has been automatically generated from `init.org'
  ;;;     Any changes made to this file will be eliminated the next
  ;;;     time the org file is 'tangled'.  To make permanent changes,
  ;;;     edit the org file directly.

  ;;; Code:
#+END_SRC

* Core Functionality
  This section contains general settings that affect the core functionality
  of the emacs editor.  They tend to exist across major- and minor-modes,
  and so deserve their own section.

** Basic Settings
   Let's tweak some basic settings:
   
*** Miscellaneous
    - Don't create backup (tilde) files when a file is opened.  This behavior
      does not match well with my workflow.
    - Clear the backup directory alist.  Since we won't be making backups, we
      won't need a place to put them.
    - Turn off the splash screen.  We've all seen it before.
    - Don't make an audible beep.
 
#+BEGIN_SRC emacs-lisp
  ;;; A few global settings.
  (setf make-backup-files nil
        backup-directory-alist nil
        inhibit-splash-screen t
        visible-bell t)
#+END_SRC

*** Line Number Format
   If we open a terminal instance of emacs or emacsclient, create some space
   between line numbers and line text.  If this is not set, the line text
   appears flush against the line numbers when they are displayed.

   Create a single space between line numbers and line text.
#+BEGIN_SRC emacs-lisp
  (when (not (display-graphic-p))
      (setf linum-format "%d "))
#+END_SRC

*** TAB Inserts Spaces
    Use ~setq-default~ so that buffers that are not otherwise set to
    specifically insert TABs will instead use spaces.  Buffers that wish to
    use TABs can still do so, because their local settings will override
    this default.

    An example of a buffer that would require TABs, not spaces, is one
    displaying a Makefile.  Make requires recipes be indented with a TAB
    beneath the target.  Make chokes when this is not the case.

    Default to indenting with spaces, not TABs.  May be overridden locally.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Load Path
  All of my personal emacs resources live in one directory: =.emacs.d=.  Any
  elisp files I use, my own as well as others', are nested inside of a
  =lisp= directory.  The easiest way to inform emacs about these files is to
  recursively add the =lisp= directory, and all subdirectories, to the load
  path at startup.  The top-level =.emacs.d= directory contains artifacts
  and other things generated by emacs itself and is not appropriate to add
  to the load path.

  When setting the load-path variable, we temporarily shadow the
  ~default-directory~ global variable by setting it to the =lisp=
  subdirectory in =.emacs.d=.  We will then tell emacs to recursively add
  all subdirectories to the load path as well.  This allows us to easily
  load any elisp files located in this directory tree.  Lastly, because this
  all takes place inside a ~let~ form, the default-directory variable is
  returned to its original state once the form is executed.

  Recursively add `lisp' directory, and all subdirectories, to the load path.
#+BEGIN_SRC emacs-lisp
  (let ((default-directory "~/.emacs.d/lisp/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* Customizations
** Packages
   Initialize the ~package~ module.  We will require that package and
   initialize it here.  We will, of course, add the official GNU
   repository.  We will also add the Melpa Stable repository.  I no longer
   like to use the Melpa repo, because it is too bleeding edge.  Breakage
   can occur if package minimum-requirements change from one nightly build
   to another.

   Next, we will ensure that all desired packages are actually installed.
   To do this, we use a function from my personal library.  It scans a list
   of desired packages and installs them if they are not already present on
   the system.

   Once we have ensured all packages are installed, we load them as well as
   some custom packages which live in my =lisp= directory.  These are
   appended to the package list then loaded along with everything else.

#+BEGIN_SRC emacs-lisp
  ;;; Initialize package archives; ensure all required packages are installed;
  ;;; finally, load them all.
  (require 'package)     ; Pull in package.el
  (package-initialize)   ; Initialize it
  (setf package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (require 'ensure-packages-installed)  ; custom function that installs missing packages listed below
  (let ((package-list '(iy-go-to-char
                        helm
                        python-mode
                        key-chord
                        yasnippet
                        flycheck
                        magit
                        abyss-theme
                        dockerfile-mode
                        docker-tramp
                        yaml-mode)))
    (ensure-packages-installed package-list)
    ;;; Now load each package, plus some custom packages.
    (append package-list
            helm-config             ; required for helm package
            select-comment-by-lang  ; see lisp directory
            cpp-funcs               ; ""
            doxygen                 ; ""
            my-work-utils)          ; ""
    (dolist (cool-thing package-list
                        t)
      (funcall 'require cool-thing)))
#+END_SRC

** Interface and Buffers

*** Slime Settings
    If SBCL is installed, set it as the default common lisp implementation.
    By default, emacs will use this implementation when it launches a lisp
    repl within the emacs process.

    If slime is installed, set =slime-contribs= to =slime-fancy=.  This
    package loads many extras and nice-to-have features.

#+BEGIN_SRC emacs-lisp
  ;;; Set default lisp impelentation, and load the `slime-fancy' package.
  (if (not (null (locate-file "sbcl" "/usr/bin")))
      (setf inferior-lisp-program "/usr/bin/sbcl"))
  (if (package-installed-p 'slime)
      (setf slime-contribs '(slime-fancy))
#+END_SRC

** User Interface

#+BEGIN_SRC emacs-lisp
  ;;; Turn ON some UI elements
  (dolist (mode '(global-linum-mode     ; display line numbers in margin
                  column-number-mode))  ; display line and column number in status bar
    (funcall mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; Turn OFF some UI elements
  (dolist (mode '(tool-bar-mode
                  menu-bar-mode
                  horizontal-scroll-bar-mode
                  tooltip-mode))
    (when (fboundp mode)
      (funcall mode -1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; Enable some commands which are disabled by default
  (put 'narrow-to-defun  'disabled nil)  ;
  (put 'narrow-to-page   'disabled nil)  ; Narrowing
  (put 'narrow-to-region 'disabled nil)  ;
#+END_SRC

** SQL Buffer
   Create a SQL scratch buffer that is not backed by a file.  This is very
   useful buffer for cut and paste as well as composing longer statements.

   Create an SQL scratch buffer
#+BEGIN_SRC emacs-lisp
  (create-sql-buffer)
#+END_SRC

** Loading Themes
    ;; Loading themes: Must be performed differently depending on whether this
    ;; is a daemonized server or a stand-alone instance.  For more info, see:
    ;;   `https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr'
    ;; (if (daemonp)
    ;;     (add-hook 'after-make-frame-functions #'load-my-theme)
    ;;   (load-my-theme))
    
** Global Key Map and Bindings
   Anything that should happen across all modes (more or less)

   helm settings
#+BEGIN_SRC emacs-lisp
  (and
   (global-set-key (kbd "M-x") #'helm-M-x)
   (global-set-key (kbd "C-x C-f") #'helm-find-files)
   (helm-mode 1))  ; Start helm automatically
#+END_SRC

   key chord
#+BEGIN_SRC emacs-lisp
  ;;; `key-chord-define-local' function is used in mode hooks below.  These
  ;;; are global definitions here.
  (and
   (key-chord-mode 1)
   (key-chord-define-global "fj" #'iy-go-up-to-char)
   (key-chord-define-global "fk" #'iy-go-to-char-backward))
#+END_SRC

   Miscellaneous keybindings
#+BEGIN_SRC emacs-lisp
  (and
   (fset 'sort-buffer-by-name  ; Create function cell and assign it to key chord
         "\M-2\M-x Buffer-menu-sort")
   (global-set-key (kbd "C-c 2") #'sort-buffer-by-name)) ; sort buffer by name
  (global-set-key (kbd "<f1>") #'shell-command)          ; shell command
  (global-set-key (kbd "<select>") #'move-end-of-line)   ; <end> -> end of line
  (global-set-key (kbd "C-c C-g") #'magit-status)        ; Invoke magit-status screen, from which all magit commands are available
  (global-set-key (kbd "C-x C-b") #'ibuffer)  ; Use ibuffer instead of default buffer list
#+END_SRC

** Hooks
    Common C/C++ hooks. This hook will be run for many c-like languages, but
    these keybindings may be overridden by defining local bindings in a
    lower keymap for a given language. See
    [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs]
    [mastering key bindings]] for a discussion of this topic.
   
    TODO - Since my list of hook functions is always growing, I would like to move the hooks and hook functions
           into a list and then use something like mapcar to apply the add-hook function to everything in the list.

*** Add Hook Functions
   Add mode-specific hook functions to the hook variables
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook #'c-style-lang-hook-func)
  (add-hook 'c++-mode-hook #'cpp-hook-func)
  (add-hook 'python-mode-hook #'python-hook-func)
  (add-hook 'emacs-lisp-mode-hook #'lisp-settings)
  (add-hook 'lisp-mode-hook #'lisp-settings)
  (add-hook 'sh-mode-hook #'bash-hook-func)
  (add-hook 'projectile-mode-hook #'projectile-hook-func)
  (add-hook 'text-mode-hook #'text-hook-func)
  (add-hook 'org-mode-hook #'org-hook-func)
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** Custom Hook functions

C-like languages
#+BEGIN_SRC emacs-lisp
  (defun c-style-lang-hook-func ()
    "Run these commands for all c-like languages."
    (setq-default c-basic-offset 2)
    (superword-mode -1)  ; treat underscore-separated words as a single word
    (subword-mode t)     ; treat camelCase words as separate words
    (key-chord-define-local "pq" "{\n\n}\C-p\t")
    (c-set-offset 'case-label '+) ; indent case statements in a switch block
    (show-paren-mode t)
    (which-function-mode)
    (yas-reload-all)
    (yas-minor-mode)
    (flycheck-mode)
    (local-set-key (kbd "C-c o") #'ff-find-other-file)
    (local-set-key (kbd "C-c c") #'insert-triplet)
    (local-set-key (kbd "C-c d") #'debug-comment)
    (local-set-key (kbd "C-c f") #'func-header)
    (local-set-key (kbd "C-c n") #'get-class-name)
    (local-set-key (kbd "C-c i") #'imenu))
#+END_SRC

C++
#+BEGIN_SRC emacs-lisp
  (defun cpp-hook-func ()
    ;; Found this indentation info at: https://lists.gnu.org/archive/html/help-gnu-emacs/2013-03/msg00335.html
    ;; By issuing the following command, you can see what indentation vars are set to:
    ;;   M-x set-variable RET c-echo-syntactic-information-p RET t RET
    (c-set-offset 'inclass '++)
    (c-set-offset 'access-label '-)
    ;; Add some keywords to to C++ mode
    (font-lock-add-keywords 'c++-mode
                            '(("nullptr" . font-lock-keyword-face)
                              ("constexpr" . font-lock-keyword-face))))
#+END_SRC

Lisp
#+BEGIN_SRC emacs-lisp
  (defun lisp-settings ()
    "Code to be evaluated when lisp major modes are enabled.  Currently, we
  enable eldoc-mode."
    ;; This function probably does not need to be run for the slime hook, as
    ;; these functions and others are already included in that mode.
    (eldoc-mode)
    (yas-reload-all)
    (show-paren-mode t)
    (yas-minor-mode))
#+END_SRC

Python
#+BEGIN_SRC emacs-lisp
  (defun python-hook-func ()
    "Some call me... Tim."
    (setq-default indent-tabs-mode nil)  ; use spaces, not tabs
    (setf tab-width 4)
    (yas-reload-all)
    (yas-minor-mode)
    (local-set-key (kbd "C-c c") #'insert-triplet)
    (local-set-key (kbd "C-c d") #'debug-comment)
    (local-set-key (kbd "C-c f") #'func-header))
#+END_SRC

Bash
#+BEGIN_SRC emacs-lisp
  (defun bash-hook-func ()
    "To be run when we open a bash shell script."
    (message "Welcome to shell script mode. Grrrrr!!")
    (yas-reload-all)
    (show-paren-mode t)
    (yas-minor-mode)
    (local-set-key (kbd "C-c c") #'insert-triplet)
    (local-set-key (kbd "C-c d") #'debug-comment))
#+END_SRC

Text files
#+BEGIN_SRC emacs-lisp
  (defun text-hook-func()
    "These settings will be applied to anything using text-mode.  Org-mode is
  based on text-mode, so these settings affect that as well."
    (local-set-key (kbd "C-c c t") #'my-insert-time)
    (local-set-key (kbd "C-c c d") #'my-insert-date)
    (auto-fill-mode t)
    (setf fill-column 95)
    (yas-minor-mode))
#+END_SRC

Org-mode
#+BEGIN_SRC emacs-lisp
  (defun org-hook-func()
    "These are orgmode-specific settings."
    (setf org-log-done 'time))  ; timestamp when TODO item marked as DONE
#+END_SRC

JSON (Javascript)
#+BEGIN_SRC emacs-lisp
(defun json-hook-func()
  (flycheck-mode))
#+END_SRC

TODO: Change location of auto-generated emacs customization data.  It would
be better if this was not polluting my init file.

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
 '(custom-safe-themes
   (quote
    ("dd2346baba899fa7eee2bba4936cfcdf30ca55cdc2df0a1a4c9808320c4d4b22" "f9574c9ede3f64d57b3aa9b9cef621d54e2e503f4d75d8613cbcc4ca1c962c21" "b56ea05564419bcdd994e4c97ad9167d0d6abe535bd01ef5be986836c43389b7" "bcc6775934c9adf5f3bd1f428326ce0dcd34d743a92df48c128e6438b815b44f" "14f0fbf6f7851bfa60bf1f30347003e2348bf7a1005570fd758133c87dafe08f" default)))
 '(fci-rule-color "#5E5E5E")
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(package-selected-packages
   (quote
    (docker-tramp dockerfile-mode yaml-mode abyss-theme magit flycheck yasnippet key-chord python-mode helm iy-go-to-char)))
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(vc-annotate-background "#202020")
 '(vc-annotate-color-map
   (quote
    ((20 . "#C99090")
     (40 . "#Dn9A0A0")
     (60 . "#ECBC9C")
     (80 . "#DDCC9C")
     (100 . "#EDDCAC")
     (120 . "#FDECBC")
     (140 . "#6C8C6C")
     (160 . "#8CAC8C")
     (180 . "#9CBF9C")
     (200 . "#ACD2AC")
     (220 . "#BCE5BC")
     (240 . "#CCF8CC")
     (260 . "#A0EDF0")
     (280 . "#79ADB0")
     (300 . "#89C5C8")
     (320 . "#99DDE0")
     (340 . "#9CC7FB")
     (360 . "#E090C7"))))
 '(vc-annotate-very-old-color "#E090C7"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

This is the end, beautiful friend
#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC


