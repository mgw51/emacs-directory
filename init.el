;;; -*- lexical-binding: t; -*-

;;; init.el -- My emacs init file.
;;; Commentary:
;;;
;;;
;;; Code:

;; Make startup faster by reducing the frequency of garbage
;; collection.  The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 100 1024 1024))

(defconst *base-dir*
  (if (>= emacs-major-version 27)
      "~/.config/emacs/"
    "~/.emacs.d/")
  "Base directory in which all config and LISP files reside.
This was changed in version 27 to conform with XDG standards.")

;; Put all the configuration garbage generated by package into a separate file.
(setf custom-file (concat *base-dir* "lisp/init-custom.el"))
(unless (file-exists-p custom-file)
  (with-temp-file custom-file
    (insert ";;; init-custom.el --- Dedicated file into which Emacs packages may freely write configuration data.\n"
            ";;;\n"
            ";;; Commentary:\n"
            ";;;   Provide this file to prevent packages from writing their config data into my `init.el' file.\n"
            ";;;   This file was automatically generated from my `init.el' file.\n"
            ";;;\n"
            ";;; Code:\n"
            ";;;\n\n\n"

            ";;; init-custom.el ends here.\n")))
(load custom-file)

(let ((default-directory (concat *base-dir* "lisp/")))    ; temporarily redefine the default directory for normal-top-level-add-to-load-path below.
  (normal-top-level-add-to-load-path '("."))     ; add current directory to load path
  (normal-top-level-add-subdirs-to-load-path))   ; recursively add subdirectories to load path


;;; Customizations
;;; ~~~~~~~~~~~~~~

;;; Set up package archives
(progn
  (require 'package)     ; Pull in package.el
  (setf package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  ;; package-initialize must be called explicitly for major versions below 27
  (when (< emacs-major-version 27)
    (package-initialize)))


;;; Setup use-package
(eval-when-compile
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package))
;;; Use-Package Debug Variables
(setf use-package-verbose t
      use-package-compute-statistics t)

;;; Personal libraries
;;; ~~~~~~~~~~~~~~~~~~
(use-package mw-utils
  :defines org-mode-map ; not really, but shhh
  :bind (([f2] . #'mw-toggle-selective-display)
         :map text-mode-map
         ("C-c m t" . #'mw-insert-time)
         ("C-c m d" . #'mw-insert-date)
         :map org-mode-map
         ("C-c m t" . #'mw-insert-time)
         ("C-c m d" . #'mw-insert-date))
  ; Things like timestamps and other nice-to-haves
  :init
  (mw-create-sql-buffer)
  :config
  ;; see https://www.gnu.org/software/emacs/manual/html_mono/dbus.html#Bus-names
  (require 'dbus)
  (when (not (null (dbus-list-activatable-names :session)))
    (add-hook 'compilation-finish-functions #'mw-compilation-completed-notification))
  ;; Silence byte-compiler
  :functions mw-compilation-completed-notification dbus-list-activatable-names
  ;; Create autoloads for these
  :commands (mw-toggle-selective-display mw-insert-time mw-insert-date mw-create-sql-buffer))


(use-package doxygen-mode
  :hook c-mode-common
  :commands
  doxygen-function-template doxygen-struct-template doxygen-class-template
  doxygen-create-group doxygen-backward-block doxygen-forward-block)


;;; Installed packages
;;; ~~~~~~~~~~~~~~~~~~

(use-package exec-path-from-shell
  :demand t
  :ensure t
  :pin melpa
  :config
  ;; Copy important environment variables into emacs session
  ;; Mainly needed because OSX and systemd do not pass user env to emacs
  (when (daemonp)
    (exec-path-from-shell-initialize)))



(use-package flyspell
  :commands (turn-on-flyspell turn-off-flyspell flyspell-mode)
  :hook (text-mode . flyspell-mode))
  ;; :custom
  ;; (ispell-program-name "/usr/bin/hunspell")
  ;; (ispell-really-hunspell t "Set to indicate we can use Hunspell extensions")
  ;; (ispell-dictionary "en_US"))


(use-package tree-sitter
  :ensure t
  :hook #'tree-sitter-hl-mode) ; automatically turn on syntax highlighting when this mode enabled


(use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)


(use-package prog-mode
  :defines prog-mode-map
  :bind (:map prog-mode-map
              ("C-c c" . #'mw-insert-triplet)
              ("C-c d d" . #'mw-debug-comment)
              ("C-c d r" . #'mw-remove-debug)
              ("C-c w t" . #'mw-find-next-todo))
  :config
  (require 'select-comment-by-lang)
  :functions mw-insert-triplet mw-debug-comment mw-remove-debug mw-find-next-todo)


(use-package cc-mode
  :defines c-mode-base-map c++-mode-map
  :mode (("\\.\\(cpp\\|CC\\|cxx\\|tpp\\|hpp\\)\\'" . c++-mode)
         ("\\.\\(c\\|h\\)\\'" . c-mode))
  :hook (((c++-mode c-mode) . #'tree-sitter-mode)
         (c++-mode . cppsettings)
         (c-mode-common . c-common-settings)
         (c-mode-common . lsp))
  :bind (:map c-mode-base-map
              ("C-c f" . #'mw-func-header)
              ("C-c i" . #'imenu)
         :map c++-mode-map
         ("C-c n" . #'mw-get-class-name))
  :preface
  (defun cppsettings ()
      (c-set-offset 'inclass '++)
      (c-set-offset 'access-label '-)
      ;; Enable Doxygen comment styling
      (setf c-doc-comment-style '((c++-mode . doxygen)))
      (message "Run cppsettings function."))
  (defun c-common-settings ()
    (yas-reload-all)
    (superword-mode -1)  ; treat underscore-separated words as a single word?
    (subword-mode t)     ; treat camelCase words as separate words?
    (auto-revert-mode t)
    (c-set-offset 'case-label '+) ; indent case statements in a switch block
    (which-function-mode)
                                        ;  (flyspell-prog-mode)
    (font-lock-add-keywords nil '(("\\<\\(TBD\\|TODO\\|FIXME\\|DEBUG\\)"
                                   1
                                   font-lock-warning-face prepend)))
    ;;
    ;;                                  append -------\   /------- make buffer-local
    (add-hook 'before-save-hook #'whitespace-cleanup nil t))
  :config
  (require 'cpp-funcs)
  :functions mw-func-header mw-get-class-name)

(use-package go-mode
  :ensure t
  :hook (go-mode . #'lsp)
  :custom (gofmt-command "goimports")
  :config
  (add-hook 'before-save-hook #'gofmt-before-save)
  ;; only load company-go in go-mode
  (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))))
  (use-package company-go
    :ensure t
    :hook go-mode
    :config
    :after company-mode)
  (use-package flycheck-golangci-lint
    :ensure t
    :hook (go-mode . flycheck-golangci-lint-setup)
    :after (flycheck go-mode) ))

;; (use-package cc-mode
;;   :defer t
;;   :mode (("\\.\\(cpp\\|CC\\|cxx\\|tpp\\|hpp\\)\\'" . c++-mode)
;;          ("\\.\\(c\\|h\\)\\'" . c-mode))
;;   :bind (:map c-mode-base-map
;;               ("C-c o" . #'ff-find-other-file)
;;               ("C-c i" . #'imenu)
;;               ("C-c w C-t" . #'mw-find-next-todo))
;;   :preface
;;   (defun cc-mode-customizations ()
;;     "Run these commands for C, C++, objective-C, AWK, etc"
;;     (superword-mode -1)  ; treat underscore-separated words as a single word?
;;     (subword-mode t)     ; treat camelCase words as separate words?
;;     (auto-revert-mode t)
;;     (c-set-offset 'case-label '+) ; indent case statements in a switch block
;;     (which-function-mode)
;;     (flyspell-prog-mode)
;;     (font-lock-add-keywords nil '(("\\<\\(TBD\\|TODO\\|FIXME\\)" 1 font-lock-warning-face prepend)))
;;     ;; Add the following hook function(s) here because we can make them buffer-local
;;     (add-hook 'before-save-hook #'whitespace-cleanup nil t)
;;     (require 'mw-utils)
;;     (require 'select-comment-by-lang))


;;   (defun c-customization()
;;     (require 'cpp-funcs))

  
;;   (defun cpp-customization ()
;;     "Do some cpp things."
;;     ;; Found this info at: https://lists.gnu.org/archive/html/help-gnu-emacs/2013-03/msg00335.html
;;     ;; By issuing the following command, you can see what indentation vars are set to:
;;     ;;   M-x set-variable RET c-echo-syntactic-information-p RET t RET
;;     (c-set-offset 'inclass '++)
;;     (c-set-offset 'access-label '-)
;;     ;; Add some keywords to to C++ mode
;;     (font-lock-add-keywords 'c++-mode
;;                             '(("nullptr" . font-lock-keyword-face)
;;                               ("constexpr" . font-lock-keyword-face)))
;;     ;; Enable Doxygen comment styling
;;     (setf c-doc-comment-style '((c++-mode . doxygen)))
;;     ;; Add the following hook function(s) here because we can make them buffer-local
;;                                         ; append --\    /-- make buffer-local
;;     (add-hook 'c++-mode-hook #'mw-find-proper-mode nil t)
;;     (require 'cpp-funcs))
;;   :config
  
;;   :hook ((c++-mode . #'cpp-customization)
;;          (c-mode . #'c-customization)
;;          (cc-mode . #'cc-mode-customizations)))

;; (use-package org-roam
;;   :demand t
;;   :ensure t
;;   :pin melpa
;;   :hook after-init
;;   :config
;;   (setq org-roam-directory "~/Nextcloud/org-roam"))


(use-package org
  :ensure t
  :mode ("\\.org\\'" . org-mode)
  :defines org-babel-load-languages org-export-backends
  :bind (; Bind these globally
         ("C-c o l" . 'org-store-link)
         ("C-c o a" . 'org-agenda)
         ("C-c o c" . 'org-capture)
         ;; Bind the following to org-mode
         (:map org-mode-map
               ("C-c b" . 'mw-dnd/make-battle-chart-from-region)
               ("C-c r" . 'mw-org-table-recalc)))
  :preface
  (require 'ox-confluence nil 'no-error)
  (require 'ox-md nil 'no-error)
  (require 'ox-man nil 'no-error)
  (require 'mw-dnd nil 'no-error)
  (setq org-export-backends '(ascii html icalendar latex confluence md man))
  (defun mw-org-table-recalc()
    "For use in the bind section above."
    (interactive)
    (org-table-recalculate 'all))
  :custom ((fill-column 86 "Set `auto-fill-mode' fill column to something reasonable.")
           (org-hide-emphasis-markers t "Hiding markup characters makes for a cleaner looking buffer.")
           (org-hide-leading-stars t "Omit leading stars in subheadings.")
           (org-pretty-entities t "Show entities as UTF8 characters.")
           (org-fontify-done-headline t "Fontify the whole headline when it is done.")
           (org-startup-indented t "Enforce proper indentation of headlines.")
           (org-log-done "time" "Insert timestamp when a task is marked as 'Done'"))
  :init
  (add-hook 'org-mode-hook #'turn-on-auto-fill)
  :config
  (use-package ob-go
    :ensure t
    :pin melpa)
  (use-package ob-rust
    :ensure t
    :pin melpa)
  (use-package ob-restclient
    :ensure t
    :pin melpa)
  ;; Add minimal support for generally unsupported modes.
  (add-to-list 'org-src-lang-modes '("CQL" . "cql-mode"))

  ;; Enable some languages in org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t) ; C, C++, and D are all handled by same ob-C.el file.
     (go . t)
     (emacs-lisp . t)
     (lisp . t)
     (plantuml . t)
     (python . t)
     (perl . t)
     (lua . t)
     (shell . t)
     (latex . t)
     (rust . t)
     (sql . t)))
  (require 'c2-rowing))


(use-package restclient
  :defer t
  :ensure t
  :pin melpa
  :commands restclient-mode
  :mode (("\\.restclient\\'" . restclient-mode)
         ( "\\.rest\\'" . restclient-mode))
  :preface
  (defun get-session ()
    "Get a session token returned from a REST login call."
    (interactive)
    (message "%s"
             (setq-local session-var
                         (with-current-buffer "*HTTP Response*"
                           (goto-char (point-min))
                           (when (search-forward-regexp "\"session\": \"\\(.*\\)\"" nil t)
                             (match-string 1))))))
  :bind (:map restclient-mode-map
         ("C-c r s" . #'get-session))
  :config
  (use-package restclient-helm
    :ensure t
    :pin melpa)
  (use-package restclient-test
	       :ensure t
	       :pin melpa)
  (use-package company-restclient
	       :ensure t
	       :pin melpa))



(use-package systemd
  :defer t
  :ensure t
  :pin melpa
  :config
  (use-package helm-systemd
    :ensure t
    :pin melpa))


(use-package projectile
  :defer t
  :ensure t
  :pin melpa
  :commands projectile-register-project-type
  :bind-keymap ("C-c p" . projectile-command-map)
  :hook (prog-mode . projectile-mode)
  :preface
  (defun mw-advice-projectile-project-root (orig-fn &optional dir)
    "Disable projectile when visiting remote files with tramp.

Projectile typcially requires significant file system operations which can slow things down when operating on a remote file.  Disabling this feature avoids these issues."
    (let ((dir (file-truename (or dir default-directory))))
      (unless (file-remote-p dir)
        (funcall orig-fn dir))))
  :custom
  (projectile-mode-line '(:eval (projectile-project-name)))
  (projectile-completion-system 'helm)
  (projectile-cache-file (concat (expand-file-name user-emacs-directory) "projectile/projectile.cache"))
  (projectile-enable-caching t)
  :config
  (setf projectile-enable-cmake-presets t) ; Enable CMake presets
;;  (advice-add 'projectile-project-root :around #'mw-advice-projectile-project-root)
  (projectile-register-project-type 'elisp '(".elisp-project")
                                                 :test-suffix "-test"
                                                 :test-dir "test/")
  (projectile-register-project-type 'c++-autotools '(".c++-autotools")
                                    :configure "%s/bootstrap && %s/configure"
                                    :compile "make"
                                    :test-suffix "_test"
                                    :src-dir "%s/src/"
                                    :test-dir "%s/test/unit_tests/")
  (projectile-register-project-type 'cmake '(".projectile-cmake")
                                    :configure "cmake -S %s -B build"
                                    :compile "cmake --build build -j15"
                                    :src-dir "src/"
                                    :test-suffix "_test"
                                    :test-dir "test/")
  (use-package ag
    :ensure t
    :pin melpa
    :after projectile)
  :delight '(:eval (concat " ¶[" (projectile-project-name) "]")))


(use-package cmake-mode
  :defer t
  :ensure t
  :pin melpa
  :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'")
  :init
  (use-package cmake-font-lock
    :defer t
    :ensure t
    :pin melpa
    :hook (cmake-mode . cmake-font-lock-activate))
  :config
  (company-mode))


(use-package delight
  :defer t
  :ensure t
  :pin gnu)


(use-package key-chord
  :defer t
  :ensure t
  :pin melpa
  :commands mw-insert-curly-braces
  :hook
  ((rust-mode c-mode-common sh-mode cperl-mode go-mode) . #'load-curly-braces)
  :preface
  (defun load-curly-braces()
    (key-chord-define-local "pq" #'mw-insert-curly-braces))
  (defun global-chords()
    (key-chord-define-global "fj" #'iy-go-up-to-char)
    (key-chord-define-global "kd" #'iy-go-to-char-backward))
  :init
  (key-chord-mode 1)
  (global-chords))
  

(use-package helm
  :demand t
  :ensure t
  :pin melpa
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x c M-g M-g" . helm-grep-do-git-grep))
  :config
  (helm-mode 1)
  (use-package helm-config)
  (use-package helm-projectile
    :defer t
    :ensure t
    :pin melpa
    :after projectile)
  :delight " Ƕ")


(use-package yasnippet
  :ensure t
  :pin melpa
  :config
  (yas-global-mode 1))
  ;; (use-package yasnippet-snippets
  ;;   :defer t
  ;;   :ensure t
  ;;   :pin melpa
  ;;   :after yasnippet))


(use-package flycheck
  :defer t
  :commands flycheck-mode
  :ensure t
  :pin melpa
  :init (global-flycheck-mode)
  :config
  (use-package flycheck-pycheckers
    :defer t
    :after elpy
    :hook elpy-mode
    :ensure t
    :pin melpa)
  (use-package flycheck-clang-tidy
    :defer t
    :after flycheck-mode
    :hook (flycheck-mode . #'flycheck-clang-tidy-setup)
    :ensure t
    :pin melpa))


(use-package magit
  :defer t
  :ensure t
  :pin melpa
  :bind ("C-c C-g" . #'magit-status))


;; (use-package rtags
;;   :defer t
;;   :ensure t
;;   :pin melpa
;;   :hook ((c++-mode c-mode) . #'rtags-start-process-unless-running)
;;   :custom
;;   (rtags-verify-protocol-version nil)
;;   (rtags-autostart-diagnostics t)
;;   (rtags-use-helm t)
;;   (rtags-process-flags "-v --inactivity-timeout 300 --log-flush -j2 --rp-nice-value 19")
;;   :config
;;   (rtags-enable-standard-keybindings)
;;   (use-package flycheck-rtags
;;     :ensure t
;;     :pin melpa
;;     :after flycheck)
;;   (use-package helm-rtags
;;     :ensure t
;;     :pin melpa
;;     :after helm)
;;   (use-package company-rtags
;;     :ensure t
;;     :delight " CrT"
;;     :after company
;;     :config
;;     (push 'company-rtags company-backends)))


;; (use-package irony
;;   :ensure t
;;   :pin melpa
;;   :after company
;;   :hook (((c++-mode c-mode) . irony-mode) ; start irony mode when c/c++ hooks are run
;;          (irony-mode . irony-cdb-autosetup-compile-options)) ; run autosetup when we enter irony mode
;;   :delight " Fe"
;;   :config
;;   (use-package company-irony
;;     :ensure t
;;     :pin melpa
;;     :after company
;;     :config
;;     (add-to-list 'company-backends 'company-irony)
;;     :bind ("C-c w i" . #'company-irony))
;;   (use-package company-irony-c-headers
;;     :ensure t
;;     :pin melpa
;;     :after company
;;     :config
;;     (add-to-list 'company-backends '(company-irony-c-headers company-irony)))
;;   (use-package flycheck-irony
;;     :ensure t
;;     :pin melpa
;;     :hook (flycheck-mode . flycheck-irony-setup)))


;; (use-package elpy
;;   :ensure t
;;   :defer t
;;   :pin melpa
;;   :delight "🥧"
;;   :init
;;   (elpy-enable)
;;   (setq exec-path (cons (expand-file-name "~/.local/bin") exec-path)))


;; (use-package dockerfile
;;   :ensure t
;;   :config)
  ;; (use-package docker-tramp
  ;;   :ensure t
  ;;   :pin melpa))


(use-package yaml-mode
  :ensure t
  :pin melpa)


(use-package company
  :ensure t
  :pin melpa
  :delight " Ç"
  :custom
  (company-idle-delay 0.50)
  :config
  (global-company-mode)
  (use-package company-shell
    ;; placed here for lack of a better place...
    :ensure t))


;; (use-package shell-pop
;;   :ensure t
;;   :pin melpa
;;   :bind (("C-c s" . shell-pop))
;;   :config
;;   (setf shell-pop-window-position "bottom"
;;         shell-pop-window-size 20))


;; ;; (use-package sr-speedbar
;; ;;   :config
;; ;;   (setq speedbar-use-images nil))


;; (use-package buttercup
;;   :ensure t
;;   :pin melpa)


;; (use-package slime
;;   :if (executable-find "sbcl")
;;   :ensure t
;;   :pin melpa-stable
;;   :config
;;   (use-package slime-company
;;     :after 'slime
;;     :ensure t
;;     :pin melpa-stable)
;;   (setf inferior-lisp-program (executable-find "sbcl")
;;         slime-contribs '(slime-fancy)))


;;; Language Server Protocol setup.  Hook lsp-mode from
;;; the appropriate language mode so we don't call it
;;; globally.  Not all languages use LSP in this
;;; config.
(use-package lsp-mode
  :ensure t
  :pin melpa
  :hook prog-mode
  :bind-keymap ("C-c l" . lsp-command-map)
  :commands lsp
  :custom
  (lsp-prefer-flymake nil)
  (lsp-auto-guess-root t)  ; will use projectile
  (lsp-auto-configure t)   ; auto configure dependencies etc.
  :config
  ;;; Increase `read-process-output-max' because content returned from
  ;;; lsp servers can easily exceed the default limit.
  (setf read-process-output-max (* 1024 1024 2))
  ;; Register remote lsp servers
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "gopls")
                    :major-modes '(go-mode)
                    :remote? t
                    :server-id 'gopls-remote))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "ccls")
                    :major-modes '(c-mode c++-mode)
                    :remote? t
                    :server-id 'ccls-remote))
  ;; lsp-ui contains high-level UI support such as flycheck support and code lenses
  (use-package lsp-ui
    :ensure t
    :pin melpa
    :after lsp-mode
    :commands lsp-ui-mode)
  (use-package helm-lsp
    :ensure t
    :pin melpa
    :after (helm lsp-mode)
    :commands helm-lsp-workspace-symbol))


;;; For debugging
(use-package dap-mode
  :ensure t
  :pin melpa
  :after (lsp-mode)
  :custom
  (dap-gdb-lldb-debug-program '("/usr/bin/gdb"))
  :config
  (dap-mode 1)
  (dap-auto-configure-mode 1)
                                        ;    (dap-ui-mode t)
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup))


(use-package ccls
  :ensure t
  :defines ccls-executable
  :after lsp-mode projectile
  ;; Found the following at:
  ;;   https://www.reddit.com/r/emacs/comments/n0bc58/switch_from_using_clangd_to_ccls/
  :hook ((c++-mode c-mode) . (lambda () (require 'ccls) (lsp)))
  :custom
;  (ccls-args nil)
;  (ccls-executable "/usr/local/bin/ccls");(find-ccls))
  (projectile-project-root-files-top-down-recurring
   (append '("compile_commands.json" ".ccls")
           projectile-project-root-files-top-down-recurring))
  :config
  (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))


(use-package toml-mode
  :ensure t
  :pin melpa)


;; (use-package rust-mode
;;   :ensure t
;;   :pin melpa
;;   :hook (rust-mode . lsp)
;;   :custom
;;   (exec-path (cons (expand-file-name "~/.cargo/bin") exec-path))  ; add cargo bin directory to exec-path
;;   :config
;;   (use-package cargo
;;     :ensure t
;;     :pin melpa
;;     :hook (rust-mode . cargo-minor-mode))
;;   (use-package flycheck-rust
;;     :ensure t
;;     :pin melpa
;;     :hook (flycheck-mode . flycheck-rust-setup)))


(use-package cql-mode
  :defer t
  :ensure t)

(use-package php-mode
  :ensure t
  :pin melpa
  :mode ("\\.php\\'" . php-mode)
  :config
  (use-package company-php
    :ensure t))


;; ;;; Built-ins
;; ;;;
(use-package smartparens
  :ensure t
  :hook
  ((emacs-lisp-mode lisp-mode) . smartparens-mode)
  :init
  (use-package smartparens-config))


;;; Themes
;;;
(use-package zerodark-theme
  ; This theme is terminal-safe
  :demand t
  :ensure t
  :pin melpa
  :init
  ;; emacs27 changed default behavior, requiring a theme no longer automatically loads that theme.
  (load-theme 'zerodark 'NO-CONFIRM))
;; (use-package solarized-theme)
;; (use-package abyss-theme)


;;; Toggle UI Elements
;;;
(dolist (mode-value '((global-display-line-numbers-mode . 1)  ; display line numbers in margin
                      (show-paren-mode . 1)    ; this should be on all the time
                      (tool-bar-mode . -1)
                      (menu-bar-mode . -1)
                      (horizontal-scroll-bar-mode . -1)
                      (scroll-bar-mode . -1)
                      (tooltip-mode . -1)
                      (winner-mode . 1)))
  (when (fboundp (car mode-value))
    (funcall (car mode-value) (cdr mode-value))))

;;; Enable some commands
;;;
(put 'narrow-to-defun  'disabled nil)  ;
(put 'narrow-to-page   'disabled nil)  ; Narrowing
(put 'narrow-to-region 'disabled nil)  ;

;;; General Customizations
;; (when (not (display-graphic-p))
;;     (setf linum-format "%d "))      ; add space between line numbers and buffer text
(setq-default indent-tabs-mode nil) ; indent with spaces only
(setq-default c-basic-offset 2)     ; ensure that offset is two spaces and no more
(setf make-backup-files nil         ; do not make backup files (tilde files)
      backup-directory-alist nil    ; we don't need a backup directory
      inhibit-splash-screen t
      visible-bell t                ; Flash mode-bar instead of ringing system bell
      abbrev-file-name (concat *base-dir* "abbrev_defs")
      save-abbrevs 'silent          ; Abbrev-mode settings
      compilation-scroll-output 'first-error)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Global Key Map and Bindings
;;; Anything that should happen across all modes (more or less)

;; General keybindings
(global-set-key (kbd "<f1>") #'shell-command)          ; shell command
(global-set-key (kbd "<select>") #'move-end-of-line)   ; <end> -> end of line

(global-set-key (kbd "C-x C-b") #'ibuffer)  ; Use ibuffer instead of default buffer list

;;; Macros and Hooks
;; Common C/C++ hooks. This hook will be run for many c-like languages,
;; but these keybindings may be overridden by defining local bindings in
;; a lower keymap for a given language. See 'https://www.masteringemacs.org/article/mastering-key-bindings-emacs'
;; for a discussion of this topic.
;;
;; TODO - Since my list of hook functions is always growing, I would like to move the hooks and hook functions
;;        into a list and then use something like mapcar to apply the add-hook function to everything in the list.
;;
;; (add-hook 'c-mode-common-hook #'cc-mode-customizations)
;; (add-hook 'c++-mode-hook #'cpp-customizations)
;; (add-hook 'python-mode-hook #'python-hook-func)
(add-hook 'emacs-lisp-mode-hook #'lisp-settings)
(add-hook 'lisp-mode-hook #'lisp-settings)
;; (add-hook 'perl-mode-hook #'perl-settings)
;; (add-hook 'sh-mode-hook #'bash-hook-func)
;; (add-hook 'text-mode-hook #'text-hook-func)
;; (add-hook 'org-mode-hook #'org-hook-func)
;; ;(add-hook 'after-init-hook #'global-flycheck-mode)
;; (add-hook 'sql-mode-hook #'sql-hook-func)

;; (add-hook 'cperl-mode-hook #'cperl-hook-func)

;;; Custom Hook functions
(defun cc-mode-customizations ()
  "Run these commands for C, C++, objective-C, AWK, etc."
  (yas-reload-all)
  (superword-mode -1)  ; treat underscore-separated words as a single word?
  (subword-mode t)     ; treat camelCase words as separate words?
  (auto-revert-mode t)
  (c-set-offset 'case-label '+) ; indent case statements in a switch block
  (which-function-mode)
;  (flyspell-prog-mode)
  (font-lock-add-keywords nil '(("\\<\\(TBD\\|TODO\\|FIXME\\|DEBUG\\)" 1 font-lock-warning-face prepend)))
  ;; Add the following hook function(s) here because we can make them buffer-local
                                 ;   append -------\   /------- make buffer-local
  (add-hook 'before-save-hook #'whitespace-cleanup nil t))


(defun cpp-customizations ()
  "Do some cpp things."
  ;; Found this info at: https://lists.gnu.org/archive/html/help-gnu-emacs/2013-03/msg00335.html
  ;; By issuing the following command, you can see what indentation vars are set to:
  ;;   M-x set-variable RET c-echo-syntactic-information-p RET t RET
  (c-set-offset 'inclass '++)
  (c-set-offset 'access-label '-)
  ;; Enable Doxygen comment styling
  (setf c-doc-comment-style '((c++-mode . doxygen))))


(defun lisp-settings ()
  "Code to be evaluated when Lisp major modes are enabled."
  ;; This function probably does not need to be run for the slime hook, as
  ;; these functions and others are already included in that mode.
  (eldoc-mode)
  (yas-reload-all)
  (show-paren-mode t)
;  (local-set-key (kbd "C-m") #'newline-and-indent)
  (company-mode))


;; (defun perl-settings()
;;   "Evaluate this stuff after perl mode has been started."
;;   (setf tab-width 4)
;;   (yas-minor-mode)
;;   (local-set-key (kbd "C-c c") #'mw-insert-triplet))

;; (defun python-hook-func ()
;;   "Some call me... Tim."
;;   (setq-default indent-tabs-mode nil)  ; use spaces, not tabs
;;   (setf tab-width 4)
;; ;  (yas-reload-all)
;;   (yas-minor-mode)
;;   (local-set-key (kbd "C-c c") #'mw-insert-triplet)
;;   (local-set-key (kbd "C-c d") #'mw-debug-comment)
;;   (local-set-key (kbd "C-c f") #'func-header))

;; (defun bash-hook-func ()
;;   "To be run when we open a bash shell script."
;;   (message "Welcome to shell script mode. Grrrrr!!")
;; ;  (yas-reload-all)
;;   (show-paren-mode t)
;;   (yas-minor-mode)
;;   (local-set-key (kbd "C-c c") #'mw-insert-triplet)
;;   (local-set-key (kbd "C-c d") #'mw-debug-comment))

;; (defun text-hook-func()
;;   "These settings will be applied to anything using 'text-mode'.
;; Org-mode is based on 'text-mode', so these settings affect that as well."
;;   (auto-fill-mode t)
;;   (setf fill-column 95)
;;   (yas-minor-mode))

;; (defun org-hook-func()
;;   "These are orgmode-specific settings."
;;   (setf org-log-done 'time    ; timestamp when TODO item marked as DONE
;;         org-latex-remove-logfiles t))

;; (defun json-hook-func()
;;   (flycheck-mode))

;; (defun sql-hook-func()
;;   (local-set-key (kbd "C-c c") #'mw-insert-triplet))

;; (defalias 'perl-mode 'cperl-mode)
;; (defun cperl-hook-func()
;;   (local-set-key (kbd "C-c w c") #'mw-insert-triplet)
;;   (local-set-key (kbd "C-c w s") #'mw-perl-setup))

;; ;; Load rig-specific config files
;; (when (file-directory-p (concat *base-dir* "lisp/config"))
;;   (dolist (file (directory-files (concat *base-dir* "lisp/config") 'full-path)
;;                 (message "Finished loading custom config files"))
;;     (unless (file-directory-p file)
;;       (load file))))

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Set GC to sometihng reasonable
(setq gc-cons-threshold (* 2 1024 1024))
;;; init.el ends here
